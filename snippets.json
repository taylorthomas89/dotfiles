{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  "Console Log": {
    "prefix": "clog",
    "body": [
      "console.log('$1');"
    ],
    "description": "Log output to console"
  },
  "Angular Controller": {
    "prefix": "acontroller",
    "body": [
      "app.controller('homeController', function($scope, $state, $stateParams) {",
      "",
      "})"
    ],
    "description": "AngularJS controller"
  },
  "Angular Module": {
    "prefix": "amodule",
    "body": [
      "var app = angular.module('myApp', ['ui.router'])"
    ],
    "description": "AngularJS module"
  },
  "Angular Service": {
    "prefix": "aservice",
    "body": [
      "app.service('homeService', function($http) {",
      "",
      "})"
    ],
    "description": "AngularJS service"
  },
  "Angular Filter": {
    "prefix": "afilter",
    "body": [
      "app.filter('homeFilter', function() {",
      "// In the return function, we must pass in a single parameter which will be the data we will work on.",
      "// We have the ability to support multiple other parameters that can be passed into the filter optionally",
      "  return function(input, optional1, optional2) {",
      "    var output;",
      "    // Do filter work here",
      "",
      "    return output;",
			"	}",
      "});",
      "",
      "// For more go to https://scotch.io/tutorials/building-custom-angularjs-filters"
    ],
    "description": "AngularJS service"
  },
  "Angular UI Router": {
    "prefix": "uiRouter",
    "body": [
      "app.config(function($stateProvider, $urlRouterProvider) {",
      "",
      "	$urlRouterProvider.otherwise('/');",
      "",
      "  $stateProvider",
      "    .state('home', {",
      "      url: '/',",
      "      templateUrl: './views/home.html',",
      "      controller: 'homeController'",
			"		})",
      "})"
    ],
    "description": "UI Router"
  },
  "React-Redux Reducer": {
    "prefix": "rreducer",
    "body": [
      "import {",
      "  GET_EXPENSES_BEGIN,",
      "  GET_EXPENSES_SUCCESS,",
      "  GET_EXPENSES_FAILURE,",
      "  CREATE_EXPENSE_BEGIN,",
      "  CREATE_EXPENSE_SUCCESS,",
      "  CREATE_EXPENSE_FAILURE,",
      "  GET_EXPENSE_BEGIN,",
      "  GET_EXPENSE_SUCCESS,",
      "  GET_EXPENSE_FAILURE,",
      "  UPDATE_EXPENSE_BEGIN,",
      "  UPDATE_EXPENSE_SUCCESS,",
      "  UPDATE_EXPENSE_FAILURE,",
      "  DELETE_EXPENSE_BEGIN,",
      "  DELETE_EXPENSE_SUCCESS,",
      "  DELETE_EXPENSE_FAILURE",
      "} from '../actions/expenses';",
      "",
      "const initialState = {",
      "  expenses: [],",
      "  expense: null,",
      "  loading: false,",
      "  error: null",
      "};",
      "",
      "const expenseReducer = (state = initialState, action) => {",
      "  switch (action.type) {",
      "",
      "    // INDEX",
      "    case GET_EXPENSES_BEGIN:",
      "      return {",
      "        ...state,",
      "        loading: true,",
      "        error: null",
      "      };",
      "    case GET_EXPENSES_SUCCESS:",
      "      return {",
      "        ...state,",
      "        expenses: action.expenses,",
      "        loading: false",
      "      };",
      "    case GET_EXPENSES_FAILURE:",
      "      return {",
      "        ...state,",
      "        expenses: [],",
      "        loading: false,",
      "        error: \"Oops it looks like something went wrong\"",
      "      };",
      "",
      "    // CREATE",
      "    case CREATE_EXPENSE_BEGIN:",
      "      return {",
      "        ...state,",
      "        loading: true,",
      "        error: null",
      "      };",
      "    case CREATE_EXPENSE_SUCCESS:",
      "      return {",
      "        ...state,",
      "        expenses: state.expenses.concat(action.expense),",
      "        loading: false",
      "      };",
      "    case CREATE_EXPENSE_FAILURE:",
      "      return {",
      "        ...state,",
      "        loading: false,",
      "        error: \"Oops it looks like something went wrong\"",
      "      };",
      "",
      "    // SHOW",
      "    case GET_EXPENSE_BEGIN:",
      "      return {",
      "        ...state,",
      "        loading: true,",
      "        error: null",
      "      };",
      "    case GET_EXPENSE_SUCCESS:",
      "      return {",
      "        ...state,",
      "        expense: action.expense,",
      "        loading: false",
      "      };",
      "    case GET_EXPENSE_FAILURE:",
      "      return {",
      "        ...state,",
      "        expense: null,",
      "        loading: false,",
      "        error: \"Oops it looks like something went wrong\"",
      "      };",
      "",
      "    // UPDATE",
      "    case UPDATE_EXPENSE_BEGIN:",
      "      return {",
      "        ...state,",
      "        loading: true,",
      "        error: null",
      "      };",
      "    case UPDATE_EXPENSE_SUCCESS:",
      "      return {",
      "        ...state,",
      "        expense: action.expense,",
      "        loading: false",
      "      };",
      "    case UPDATE_EXPENSE_FAILURE:",
      "      return {",
      "        ...state,",
      "        loading: false,",
      "        error: \"Oops it looks like something went wrong\"",
      "      };",
      "",
      "    // DELETE",
      "    case DELETE_EXPENSE_BEGIN:",
      "      return {",
      "        ...state,",
      "        loading: true,",
      "        error: null",
      "      };",
      "    case DELETE_EXPENSE_SUCCESS:",
      "      return {",
      "        ...state,",
      "        loading: false",
      "      };",
      "    case DELETE_EXPENSE_FAILURE:",
      "      return {",
      "        ...state,",
      "        loading: false,",
      "        error: \"Oops it looks like something went wrong\"",
      "      };",
      "",
      "    default:",
      "      return state;",
      "  }",
      "}",
      "",
      "export default expenseReducer"
    ],
    "description": "React-Redux Reducer"
  },
  "React Class Component": {
    "prefix": "ccomp",
    "body": [
      "import React, { Component } from 'react';",
      "import { connect } from 'react-redux';",
      "",
      "class Name extends Component {",
      "  constructor(props) {",
      "    super(props);",
      "",
      "    this.state = {",
      "",
      "    };",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <div>",
      "",
      "      </div>",
      "    );",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state, props) => {",
      "  return {",
      "",
      "  }",
      "}",
      "",
      "export default connect(mapStateToProps)(Name);"
    ],
    "description": "React Class Component"
  },
  "React Functional Component": {
    "prefix": "fcomp",
    "body": [
      "import React from 'react';",
      "import { connect } from 'react-redux';",
      "",
      "const Name = (props) => {",
      "  return (",
      "    <div>",
      "",
      "    </div>",
      "  )",
      "}",
      "",
      "const mapStateToProps = (state, props) => {",
      "  return {",
      "",
      "  }",
      "}",
      "",
      "export default connect(mapStateToProps)(Name);"
    ],
    "description": "React Functional Component"
  },
  "React Router": {
    "prefix": "react-router",
    "body": [
      "import React, { Component } from 'react';",
      "import { Router, Route, Switch, Link, NavLink } from 'react-router-dom';",
      "import createHistory from 'history/createBrowserHistory';",
      "",
      "import HomeView from '../components/something.js';",
      "import IndexView from '../components/something.js';",
      "import NewView from '../components/something.js';",
      "import ShowView from '../components/something.js';",
      "import EditView from '../components/something.js';",
      "",
      "import NotFoundPage from '../components/something.js';",
      "import PrivateRoute from './PrivateRoute';",
      "import PublicRoute from './PublicRoute';",
      "",
      "export const history = createHistory();",
      "",
      "const AppRouter = () => {",
      "  return (",
      "    <Router history={history}>",
      "      <div>",
      "        <Switch>",
      "          <PublicRoute path=\"/\" exact={true} component={HomeView} />",
      "",
      "          <PrivateRoute path=\"/users\" exact={true} component={IndexView} />",
      "          <PrivateRoute path=\"/users/new\" exact={true} component={NewView} />",
      "          <PrivateRoute path=\"/users/:id\" component={ShowView} />",
      "          <PrivateRoute path=\"/users/:id/edit\" component={EditView} />",
      "",
      "          <Route component={NotFoundPage} />",
      "        </Switch>",
      "      </div>",
      "    </Router>",
      "  )",
      "}",
      "",
      "export default AppRouter;"
    ],
    "description": "React Router"
  },
  "React App": {
    "prefix": "react-app",
    "body": [
      "import React, { Component } from 'react';",
      "import ReactDOM from 'react-dom';",
      "import { Provider } from 'react-redux';",
      "import ls from 'local-storage';",
      "import jwtDecode from 'jwt-decode';",
      "",
      "import AppRouter from './routers/AppRouter';",
      "import store from './store/ConfigureStore';",
      "import { loginSuccess } from './actions/auth';",
      "",
      "import './styles/styles.scss';",
      "import 'react-dates/initialize';",
      "import 'react-dates/lib/css/_datepicker.css';",
      "",
      "if(ls('authorization')) {",
      "  let decoded = jwtDecode(ls('authorization'));",
      "",
      "  store.dispatch(loginSuccess({",
      "      id: decoded.id,",
      "      isLoggedIn: true,",
      "      firstName: decoded.firstName,",
      "      lastName: decoded.lastName,",
      "      band: decoded.band,",
      "      isAdmin: decoded.isAdmin",
      "    })",
      "  )",
      "}",
      "",
      "const jsx = (",
      "  <Provider store={store}>",
      "    <AppRouter />",
      "  </Provider>",
      ")",
      "",
      "ReactDOM.render(jsx, document.getElementById('app'))"
    ],
    "description": "React App"
  },
  "React Store": {
    "prefix": "react-store",
    "body": [
      "import { createStore, combineReducers, applyMiddleware, compose } from 'redux';",
      "import thunk from 'redux-thunk';",
      "import authReducer from '../reducers/auth';",
      "",
      "const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;",
      "",
      "const store = createStore(",
      "  combineReducers({",
      "    auth: authReducer",
      "  }),",
      "  composeEnhancers(applyMiddleware(thunk))",
      ");",
      "",
      "export default store;"
    ],
    "description": "React Store"
  },
  "React Action": {
    "prefix": "react-action",
    "body": [
      "import axios from '../utils/axios';",
      "import { history } from '../routers/AppRouter';",
      "",
      "export const GET_EXPENSES_BEGIN = \"GET_EXPENSES_BEGIN\";",
      "export const GET_EXPENSES_SUCCESS = \"GET_EXPENSES_SUCCESS\";",
      "export const GET_EXPENSES_FAILURE = \"GET_EXPENSES_FAILURE\";",
      "",
      "export const CREATE_EXPENSE_BEGIN = \"CREATE_EXPENSE_BEGIN\";",
      "export const CREATE_EXPENSE_SUCCESS = \"CREATE_EXPENSE_SUCCESS\";",
      "export const CREATE_EXPENSE_FAILURE = \"CREATE_EXPENSE_FAILURE\";",
      "",
      "export const GET_EXPENSE_BEGIN = \"GET_EXPENSE_BEGIN\";",
      "export const GET_EXPENSE_SUCCESS = \"GET_EXPENSE_SUCCESS\";",
      "export const GET_EXPENSE_FAILURE = \"GET_EXPENSE_FAILURE\";",
      "",
      "export const UPDATE_EXPENSE_BEGIN = \"UPDATE_EXPENSE_BEGIN\";",
      "export const UPDATE_EXPENSE_SUCCESS = \"UPDATE_EXPENSE_SUCCESS\";",
      "export const UPDATE_EXPENSE_FAILURE = \"UPDATE_EXPENSE_FAILURE\";",
      "",
      "export const DELETE_EXPENSE_BEGIN = \"DELETE_EXPENSE_BEGIN\";",
      "export const DELETE_EXPENSE_SUCCESS = \"DELETE_EXPENSE_SUCCESS\";",
      "export const DELETE_EXPENSE_FAILURE = \"DELETE_EXPENSE_FAILURE\";",
      "",
      "// INDEX",
      "const getExpensesBegin = () => ({",
      "  type: GET_EXPENSES_BEGIN,",
      "});",
      "",
      "const getExpensesSuccess = (expenses) => ({",
      "  type: GET_EXPENSES_SUCCESS,",
      "  expenses",
      "});",
      "",
      "const getExpensesError = () => ({",
      "  type: GET_EXPENSES_FAILURE",
      "});",
      "",
      "const startGetExpenses = () => {",
      "  return (dispatch, getState) => {",
      "    dispatch(getExpensesBegin())",
      "    return axios.get(\"http://localhost:3000/expenses\")",
      "      .then((response) => {",
      "        console.log(response.data);",
      "        dispatch(getExpensesSuccess(response.data));",
      "      })",
      "      .catch((error) => {",
      "        console.log(error);",
      "        dispatch(getExpensesError(error));",
      "      })",
      "  }",
      "};",
      "",
      "// CREATE",
      "const createExpenseBegin = () => ({",
      "  type: CREATE_EXPENSE_BEGIN,",
      "});",
      "",
      "const createExpenseSuccess = (expense) => ({",
      "  type: CREATE_EXPENSE_SUCCESS,",
      "  expense",
      "});",
      "",
      "const createExpenseError = () => ({",
      "  type: CREATE_EXPENSE_FAILURE",
      "});",
      "",
      "const startCreateExpense = (expenseData = {}) => {",
      "  return (dispatch, getState) => {",
      "    dispatch(createExpenseBegin())",
      "    return axios.post(`http://localhost:3000/expenses`, expenseData)",
      "    .then((response) => {",
      "      console.log(response.data);",
      "      dispatch(createExpenseSuccess(response.data))",
      "      history.push(\"/expenses\")",
      "    })",
      "    .catch((error) => {",
      "      console.log(error);",
      "      dispatch(createExpenseError(error))",
      "    })",
      "  };",
      "};",
      "",
      "// SHOW",
      "const getExpenseBegin = () => ({",
      "  type: GET_EXPENSE_BEGIN,",
      "});",
      "",
      "const getExpenseSuccess = (expense) => ({",
      "  type: GET_EXPENSE_SUCCESS,",
      "  expense",
      "});",
      "",
      "const getExpenseError = () => ({",
      "  type: GET_EXPENSE_FAILURE",
      "});",
      "",
      "const startGetExpense = (id) => {",
      "  return (dispatch, getState) => {",
      "    dispatch(getExpenseBegin())",
      "    return axios.get(`http://localhost:3000/expenses/${id}`)",
      "      .then((response) => {",
      "        console.log(response.data);",
      "        dispatch(getExpenseSuccess(response.data));",
      "      })",
      "      .catch((error) => {",
      "        console.log(error);",
      "        dispatch(getExpenseError(error));",
      "      })",
      "  }",
      "};",
      "",
      "// UPDATE",
      "const updateExpenseBegin = () => ({",
      "  type: UPDATE_EXPENSE_BEGIN,",
      "});",
      "",
      "const updateExpenseSuccess = (expense) => ({",
      "  type: UPDATE_EXPENSE_SUCCESS,",
      "  expense",
      "});",
      "",
      "const updateExpenseError = () => ({",
      "  type: UPDATE_EXPENSE_FAILURE",
      "});",
      "",
      "const startUpdateExpense = (id, updates) => {",
      "  return (dispatch, getState) => {",
      "    dispatch(updateExpenseBegin())",
      "    return axios.put(`http://localhost:3000/expenses/${id}`, updates)",
      "      .then((response) => {",
      "        console.log(response.data);",
      "        dispatch(updateExpenseSuccess(response.data))",
      "        history.push(\"/expenses\")",
      "      })",
      "      .catch((error) => {",
      "        console.log(error);",
      "        dispatch(updateExpenseError(error))",
      "      })",
      "  }",
      "}",
      "",
      "// DELETE",
      "const deleteExpenseBegin = () => ({",
      "  type: DELETE_EXPENSE_BEGIN,",
      "});",
      "",
      "const deleteExpenseSuccess = () => ({",
      "  type: DELETE_EXPENSE_SUCCESS",
      "});",
      "",
      "const deleteExpenseError = () => ({",
      "  type: DELETE_EXPENSE_FAILURE",
      "});",
      "",
      "const startRemoveExpense = (id) => {",
      "  return (dispatch, getState) => {",
      "    dispatch(deleteExpenseBegin())",
      "    return axios.delete(`http://localhost:3000/expenses/${id}`)",
      "      .then((response) => {",
      "        console.log(response.data);",
      "        dispatch(deleteExpenseSuccess(response.data))",
      "        history.push(\"/expenses\")",
      "      })",
      "      .catch((error) => {",
      "        dispatch(deleteExpenseError(error))",
      "        console.log(error);",
      "      })",
      "  };",
      "};",
      "",
      "export { startGetExpenses, startCreateExpense, startGetExpense, startUpdateExpense, startRemoveExpense }"
    ],
    "description": "React Action"
  },
  "Set State": {
    "prefix": "set-state",
    "body": [
      "this.setState((prevState) => {",
      "  return { }",
      "})"
    ],
    "description": "Set State"
  },
  "Prop Types": {
    "prefix": "prop-types",
    "body": [
      "import PropTypes from 'prop-types';",
      "",
      "MyComponent.propTypes = {",
      "  optionalArray: PropTypes.array,",
      "  optionalBool: PropTypes.bool,",
      "  optionalFunc: PropTypes.func,",
      "  optionalNumber: PropTypes.number,",
      "  optionalObject: PropTypes.object,",
      "  optionalString: PropTypes.string,",
      "  optionalSymbol: PropTypes.symbol,",
      "  optionalNode: PropTypes.node, // Anything that can be rendered: numbers, strings, elements or an array",
      "  optionalElement: PropTypes.element, // A React element.",
      "  optionalMessage: PropTypes.instanceOf(Message), // instance of a class",
      "  optionalEnum: PropTypes.oneOf(['News', 'Photos']), // Limit to specific values like an enum",
      "",
      "  optionalUnion: PropTypes.oneOfType([",
      "    PropTypes.string,",
      "    PropTypes.number,",
      "    PropTypes.instanceOf(Message)",
      "  ]),",
      "",
      "  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),",
      "  optionalObjectOf: PropTypes.objectOf(PropTypes.number), // An object with property values of a certain type",
      "  optionalObjectWithShape: PropTypes.shape({ // An object taking on a particular shape",
      "    color: PropTypes.string,",
      "    fontSize: PropTypes.number",
      "  }),",
      "",
      "  requiredFunc: PropTypes.func.isRequired,",
      "  requiredAny: PropTypes.any.isRequired,",
      "",
      "  // You can also specify a custom validator. It should return an Error",
      "  // object if the validation fails. Don't `console.warn` or throw, as this",
      "  // won't work inside `oneOfType`.",
      "  customProp: function(props, propName, componentName) {",
      "    if (!/matchme/.test(props[propName])) {",
      "      return new Error(",
      "        'Invalid prop `' + propName + '` supplied to' +",
      "        ' `' + componentName + '`. Validation failed.'",
      "      );",
      "    }",
      "  },",
      "",
      "  // You can also supply a custom validator to `arrayOf` and `objectOf`.",
      "  // It should return an Error object if the validation fails. The validator",
      "  // will be called for each key in the array or object. The first two",
      "  // arguments of the validator are the array or object itself, and the",
      "  // current item's key.",
      "  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {",
      "    if (!/matchme/.test(propValue[key])) {",
      "      return new Error(",
      "        'Invalid prop `' + propFullName + '` supplied to' +",
      "        ' `' + componentName + '`. Validation failed.'",
      "      );",
      "    }",
      "  })",
      "};"
    ],
    "description": "Prop Types"
  }
}