{
  "Console Log": {
    "prefix": "clog",
    "body": [
      "console.log('$1')"
    ],
    "description": "Log output to console"
  },
  "React Reducer": {
    "prefix": "react-reducer",
    "body": [
      "import {",
      "  EXPENSES_BEGIN,",
      "  EXPENSES_ERROR,",
      "  GET_EXPENSES_SUCCESS,",
      "  ADD_EXPENSE_SUCCESS,",
      "  GET_EXPENSE_SUCCESS,",
      "  UPDATE_EXPENSE_SUCCESS,",
      "  DELETE_EXPENSE_SUCCESS",
      "} from '../actions/expenses'",
      "",
      "const initialState = {",
      "  expenses: [],",
      "  expense: null,",
      "  loading: false,",
      "  error: null",
      "};",
      "",
      "const expenseReducer = (state = initialState, action) => {",
      "  switch (action.type) {",
      "    // EXPENSES",
      "    case EXPENSES_BEGIN:",
      "      return {",
      "        ...state,",
      "        loading: true,",
      "        error: null",
      "      }",
      "    case EXPENSES_ERROR:",
      "      return {",
      "        ...initialState,",
      "        error: action.error || 'Oops it looks like something went wrong'",
      "      }",
      "",
      "    // INDEX",
      "    case GET_EXPENSES_SUCCESS:",
      "      return {",
      "        ...state,",
      "        expenses: action.expenses,",
      "        loading: false",
      "      }",
      "",
      "    // ADD",
      "    case ADD_EXPENSE_SUCCESS:",
      "      return {",
      "        ...state,",
      "        expenses: action.expenses,",
      "        loading: false",
      "      }",
      "",
      "    // SHOW",
      "    case GET_EXPENSE_SUCCESS:",
      "      return {",
      "        ...state,",
      "        expense: action.expense,",
      "        loading: false",
      "      }",
      "",
      "    // UPDATE",
      "    case UPDATE_EXPENSE_SUCCESS:",
      "      return {",
      "        ...state,",
      "        expense: action.expense,",
      "        loading: false",
      "      }",
      "",
      "    // DELETE",
      "    case DELETE_EXPENSE_SUCCESS:",
      "      return {",
      "        ...state,",
      "        loading: false",
      "      }",
      "",
      "    default:",
      "      return state",
      "  }",
      "}",
      "",
      "export default expenseReducer",
      ""
    ],
    "description": "React Reducer"
  },
  "React Class Component": {
    "prefix": "ccomp",
    "body": [
      "import React, { Component } from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "class ${1:Name} extends Component {",
      "  constructor(props) {",
      "    super(props)",
      "",
      "    this.state = {",
      "",
      "    }",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <div>",
      "",
      "      </div>",
      "    )",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state, props) => {",
      "  return {",
      "",
      "  }",
      "}",
      "",
      "export default connect(mapStateToProps)(${1:Name})",
      ""
    ],
    "description": "React Class Component"
  },
  "React Functional Component": {
    "prefix": "fcomp",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "const ${1:Name} = (props) => {",
      "  return (",
      "    <div>",
      "",
      "    </div>",
      "  )",
      "}",
      "",
      "const mapStateToProps = (state, props) => {",
      "  return {",
      "",
      "  }",
      "}",
      "",
      "export default connect(mapStateToProps)(${1:Name})",
      ""
    ],
    "description": "React Functional Component"
  },
  "React Router": {
    "prefix": "react-router",
    "body": [
      "import React from 'react'",
      "import { Router, Route, Switch } from 'react-router-dom'",
      "import createHistory from 'history/createBrowserHistory'",
      "import Loadable from 'react-loadable'",
      "",
      "import NavBar from '../components/NavBar'",
      "",
      "import PrivateRoute from './PrivateRoute'",
      "import PublicRoute from './PublicRoute'",
      "",
      "const AsyncHomePage = Loadable({",
      "  loader: () => import('../components/static/HomePage'),",
      "  loading() {",
      "    return <div>Loading...</div>",
      "  }",
      "})",
      "",
      "const AsyncUsersPage = Loadable({",
      "  loader: () => import('../components/users/UsersPage'),",
      "  loading() {",
      "    return <div>Loading...</div>",
      "  }",
      "})",
      "",
      "const AsyncCreateUserPage = Loadable({",
      "  loader: () => import('../components/users/CreateUserPage'),",
      "  loading() {",
      "    return <div>Loading...</div>",
      "  }",
      "})",
      "",
      "const AsyncUserPage = Loadable({",
      "  loader: () => import('../components/users/UserPage'),",
      "  loading() {",
      "    return <div>Loading...</div>",
      "  }",
      "})",
      "",
      "const AsyncUpdateUserPage = Loadable({",
      "  loader: () => import('../components/users/UpdateUserPage'),",
      "  loading() {",
      "    return <div>Loading...</div>",
      "  }",
      "})",
      "",
      "export const history = createHistory()",
      "",
      "const AppRouter = () => {",
      "  return (",
      "    <Router history={history}>",
      "      <div>",
      "        <NavBar />",
      "        <Switch>",
      "          <PublicRoute path=\"/\" component={AsyncHomePage} exact />",
      "",
      "          <PrivateRoute path=\"/users\" component={AsyncUsersPage} exact />",
      "          <PrivateRoute path=\"/users/new\" component={AsyncCreateUserPage} exact />",
      "          <PrivateRoute path=\"/users/:id\" component={AsyncUserPage} exact />",
      "          <PrivateRoute path=\"/users/:id/edit\" component={AsyncUpdateUserPage} exact />",
      "",
      "          <Route component={NotFoundPage} />",
      "        </Switch>",
      "      </div>",
      "    </Router>",
      "  )",
      "}",
      "",
      "export default AppRouter",
      ""
    ],
    "description": "React Router"
  },
  "React App": {
    "prefix": "react-app",
    "body": [
      "import React from 'react'",
      "import ReactDOM from 'react-dom'",
      "import { Provider } from 'react-redux'",
      "import ls from 'local-storage'",
      "import jwtDecode from 'jwt-decode'",
      "",
      "import AppRouter from './routers/AppRouter'",
      "import store from './store/ConfigureStore'",
      "import { loginSuccess } from './actions/auth'",
      "",
      "import './styles/styles.scss'",
      "",
      "if(ls('authorization')) {",
      "  let decoded = jwtDecode(ls('authorization'))",
      "",
      "  store.dispatch(loginSuccess({",
      "      id: decoded.id,",
      "      isLoggedIn: true,",
      "      firstName: decoded.firstName,",
      "      lastName: decoded.lastName,",
      "      isAdmin: decoded.isAdmin",
      "    })",
      "  )",
      "}",
      "",
      "const jsx = (",
      "  <Provider store={store}>",
      "    <AppRouter />",
      "  </Provider>",
      ")",
      "",
      "ReactDOM.render(jsx, document.getElementById('app'))",
      ""
    ],
    "description": "React App"
  },
  "Redux Store": {
    "prefix": "react-store",
    "body": [
      "import { createStore, combineReducers, applyMiddleware, compose } from 'redux'",
      "import thunk from 'redux-thunk'",
      "",
      "import authReducer from '../reducers/auth'",
      "import expenseReducer from '../reducers/expenses'",
      "",
      "const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose",
      "",
      "const store = createStore(",
      "  combineReducers({",
      "    auth: authReducer,",
      "    expenses: expenseReducer",
      "  }),",
      "  composeEnhancers(applyMiddleware(thunk))",
      ")",
      "",
      "export default store",
      ""
    ],
    "description": "Redux Store"
  },
  "React Action": {
    "prefix": "react-action",
    "body": [
      "import axios from '../utils/axios'",
      "import { history } from '../routers/AppRouter'",
      "",
      "export const EXPENSES_BEGIN = 'EXPENSES_BEGIN'",
      "export const EXPENSES_ERROR = 'EXPENSES_ERROR'",
      "",
      "export const GET_EXPENSES_SUCCESS = 'GET_EXPENSES_SUCCESS'",
      "export const ADD_EXPENSE_SUCCESS = 'ADD_EXPENSE_SUCCESS'",
      "export const GET_EXPENSE_SUCCESS = 'GET_EXPENSE_SUCCESS'",
      "export const UPDATE_EXPENSE_SUCCESS = 'UPDATE_EXPENSE_SUCCESS'",
      "export const DELETE_EXPENSE_SUCCESS = 'DELETE_EXPENSE_SUCCESS'",
      "",
      "// EXPENSES",
      "export const expensesBegin = () => ({",
      "  type: EXPENSES_BEGIN",
      "})",
      "",
      "export const expensesError = () => ({",
      "  type: EXPENSES_ERROR",
      "})",
      "",
      "// INDEX",
      "export const getExpensesSuccess = (expenses) => ({",
      "  type: GET_EXPENSES_SUCCESS,",
      "  expenses",
      "})",
      "",
      "export const startGetExpenses = () => {",
      "  return (dispatch, getState) => {",
      "    dispatch(expensesBegin())",
      "    return axios.get(`\\${baseURL\\}/expenses`)",
      "      .then((response) => {",
      "        console.log(response.data)",
      "        dispatch(getExpensesSuccess(response.data))",
      "      })",
      "      .catch((error) => {",
      "        console.log(error.response)",
      "        dispatch(expensesError(error.response.data.error))",
      "      })",
      "  }",
      "}",
      "",
      "// ADD",
      "export const addExpenseSuccess = (expense) => ({",
      "  type: ADD_EXPENSE_SUCCESS,",
      "  expense",
      "})",
      "",
      "export const startAddExpense = (expenseData = {}) => {",
      "  return (dispatch, getState) => {",
      "    dispatch(expensesBegin())",
      "    return axios.post(`\\${baseURL\\}/expenses`, expenseData)",
      "      .then((response) => {",
      "        console.log(response.data)",
      "        dispatch(addExpenseSuccess(response.data))",
      "        history.push('/expenses')",
      "      })",
      "      .catch((error) => {",
      "        console.log(error.response)",
      "        dispatch(expensesError(error.response.data.error))",
      "      })",
      "  }",
      "}",
      "",
      "// SHOW",
      "export const getExpenseSuccess = (expense) => ({",
      "  type: GET_EXPENSE_SUCCESS,",
      "  expense",
      "})",
      "",
      "export const startGetExpense = (id) => {",
      "  return (dispatch, getState) => {",
      "    dispatch(expensesBegin())",
      "    return axios.get(`\\${baseURL\\}/expenses/${id}`)",
      "      .then((response) => {",
      "        console.log(response.data)",
      "        dispatch(getExpenseSuccess(response.data))",
      "      })",
      "      .catch((error) => {",
      "        console.log(error.response)",
      "        dispatch(expensesError(error.response.data.error))",
      "      })",
      "  }",
      "}",
      "",
      "// UPDATE",
      "export const updateExpenseSuccess = (expense) => ({",
      "  type: UPDATE_EXPENSE_SUCCESS,",
      "  expense",
      "})",
      "",
      "export const startUpdateExpense = (id, updates) => {",
      "  return (dispatch, getState) => {",
      "    dispatch(expensesBegin())",
      "    return axios.put(`\\${baseURL\\}/expenses/${id}`, updates)",
      "      .then((response) => {",
      "        console.log(response.data)",
      "        dispatch(updateExpenseSuccess(response.data))",
      "        history.push('/expenses')",
      "      })",
      "      .catch((error) => {",
      "        console.log(error.response)",
      "        dispatch(expensesError(error.response.data.error))",
      "      })",
      "  }",
      "}",
      "",
      "// DELETE",
      "export const deleteExpenseSuccess = () => ({",
      "  type: DELETE_EXPENSE_SUCCESS",
      "})",
      "",
      "export const startDeleteExpense = (id) => {",
      "  return (dispatch, getState) => {",
      "    dispatch(expensesBegin())",
      "    return axios.delete(`\\${baseURL\\}/expenses/${id}`)",
      "      .then((response) => {",
      "        console.log(response.data)",
      "        dispatch(deleteExpenseSuccess(response.data))",
      "        history.push('/expenses')",
      "      })",
      "      .catch((error) => {",
      "        console.log(error.response)",
      "        dispatch(expensesError(error.response.data.error))",
      "      })",
      "  }",
      "}",
      ""
    ],
    "description": "React Action"
  },
  "Set State Long": {
    "prefix": "set-state-long",
    "body": [
      "this.setState((prevState) => {",
      "  return { }",
      "})"
    ],
    "description": "Set State Long"
  },
  "Set State Inline": {
    "prefix": "set-state-inline",
    "body": [
      "this.setState((prevState) => ({ data }))"
    ],
    "description": "Set State Inline"
  },
  "Prop Types": {
    "prefix": "prop-types",
    "body": [
      "import PropTypes from 'prop-types'",
      "",
      "MyComponent.propTypes = {",
      "  optionalArray: PropTypes.array,",
      "  optionalBool: PropTypes.bool,",
      "  optionalFunc: PropTypes.func,",
      "  optionalNumber: PropTypes.number,",
      "  optionalObject: PropTypes.object,",
      "  optionalString: PropTypes.string,",
      "  optionalSymbol: PropTypes.symbol,",
      "  optionalNode: PropTypes.node, // Anything that can be rendered: numbers, strings, elements or an array",
      "  optionalElement: PropTypes.element, // A React element.",
      "  optionalMessage: PropTypes.instanceOf(Message), // instance of a class",
      "  optionalEnum: PropTypes.oneOf(['News', 'Photos']), // Limit to specific values like an enum",
      "",
      "  optionalUnion: PropTypes.oneOfType([",
      "    PropTypes.string,",
      "    PropTypes.number,",
      "    PropTypes.instanceOf(Message)",
      "  ]),",
      "",
      "  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),",
      "  optionalObjectOf: PropTypes.objectOf(PropTypes.number), // An object with property values of a certain type",
      "  optionalObjectWithShape: PropTypes.shape({ // An object taking on a particular shape",
      "    color: PropTypes.string,",
      "    fontSize: PropTypes.number",
      "  }),",
      "",
      "  requiredFunc: PropTypes.func.isRequired,",
      "  requiredAny: PropTypes.any.isRequired,",
      "",
      "  // You can also specify a custom validator. It should return an Error",
      "  // object if the validation fails. Don't `console.warn` or throw, as this",
      "  // won't work inside `oneOfType`.",
      "  customProp: function(props, propName, componentName) {",
      "    if (!/matchme/.test(props[propName])) {",
      "      return new Error(",
      "        'Invalid prop `' + propName + '` supplied to' +",
      "        ' `' + componentName + '`. Validation failed.'",
      "      )",
      "    }",
      "  },",
      "",
      "  // You can also supply a custom validator to `arrayOf` and `objectOf`.",
      "  // It should return an Error object if the validation fails. The validator",
      "  // will be called for each key in the array or object. The first two",
      "  // arguments of the validator are the array or object itself, and the",
      "  // current item's key.",
      "  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {",
      "    if (!/matchme/.test(propValue[key])) {",
      "      return new Error(",
      "        'Invalid prop `' + propFullName + '` supplied to' +",
      "        ' `' + componentName + '`. Validation failed.'",
      "      )",
      "    }",
      "  })",
      "}"
    ],
    "description": "Prop Types"
  },
  "Render Error": {
    "prefix": "render-error",
    "body": [
      "  renderError() {",
      "    if (this.state.error) {",
      "      return (",
      "        <div className='form-group alert alert-danger'>",
      "          <strong>{this.state.error}</strong>",
      "        </div>",
      "      )",
      "    }",
      "",
      "    if (this.props.error) {",
      "      return (",
      "        <div className='form-group alert alert-danger'>",
      "          <strong>{this.props.error}</strong>",
      "        </div>",
      "      )",
      "    }",
      "",
      "    return undefined",
      "  }"
    ],
    "description": "Render Error"
  }
}